From 50877bf119ccf821cdf1dc368c165295d8e8fd62 Mon Sep 17 00:00:00 2001
From: auto3000 <auto3000@users.noreply.github.com>
Date: Thu, 24 Dec 2020 14:56:48 +0100
Subject: [PATCH] logging: move logging facility to init__

---
 mod/__init__.py    | 21 +++++++++++----------
 mod/addressings.py |  4 ++--
 mod/hmi.py         | 43 +++++++++++++++++++------------------------
 mod/hmisocket.py   | 21 ++++++++++++++++++---
 mod/host.py        | 16 ++++++++++++----
 mod/session.py     |  9 ++++++++-
 mod/settings.py    | 37 ++++++++++++++++++++++++++++++++++++-
 mod/webserver.py   | 45 ++++++---------------------------------------
 8 files changed, 112 insertions(+), 84 deletions(-)

diff --git a/mod/__init__.py b/mod/__init__.py
index ca4f1710..51969e0d 100644
--- a/mod/__init__.py
+++ b/mod/__init__.py
@@ -159,19 +159,20 @@ def symbolify(name):
 
 
 def get_hardware_descriptor():
-    return safe_json_load(HARDWARE_DESC_FILE, dict)
+    #return safe_json_load(HARDWARE_DESC_FILE, dict)
+    return { "actuators" : [
+                    { "uri": "/hmi/knob1" },
+                    { "uri": "/hmi/knob2" },
+                    { "uri": "/hmi/knob3" },
+                    { "uri": "/hmi/knob4" },
+                    { "uri": "/hmi/footswitch1" },
+                    { "uri": "/hmi/footswitch2" },
+                    { "uri": "/hmi/footswitch3" },
+                    { "uri": "/hmi/footswitch4" } ] }
 
 
 def get_hardware_actuators():
-    return [ { 'uri': '/hmi/knob1' },
-            { 'uri': '/hmi/knob2' },
-            { 'uri': '/hmi/knob3' },
-            { 'uri': '/hmi/knob4' },
-            { 'uri': '/hmi/footswitch1' },
-            { 'uri': '/hmi/footswitch2' },
-            { 'uri': '/hmi/footswitch3' },
-            { 'uri': '/hmi/footswitch4' } ]
-    #return get_hardware_descriptor().get('actuators', [])
+    return get_hardware_descriptor().get('actuators', [])
 
 
 def read_file_contents(fh, fallback):
diff --git a/mod/addressings.py b/mod/addressings.py
index 83a542bb..2571b94f 100644
--- a/mod/addressings.py
+++ b/mod/addressings.py
@@ -123,8 +123,8 @@ class Addressings(object):
         self.hmi_uri2hw_map = {}
 
         for actuator in self.hw_actuators:
-            uri = actuator['uri']
-            hw_id = actuator['id']
+            uri = actuator.get('uri', '')
+            hw_id = actuator.get('id', 0)
 
             self.hmi_hw2uri_map[hw_id] = uri
             self.hmi_hwsubpages[hw_id] = 0
diff --git a/mod/hmi.py b/mod/hmi.py
index ff447a0d..760688ee 100644
--- a/mod/hmi.py
+++ b/mod/hmi.py
@@ -56,7 +56,6 @@ from mod.mod_protocol import (
     MENU_ID_SNAPSHOT_PRGCHGE,
     MENU_ID_PB_PRGCHNGE,
 )
-
 import logging
 import serial
 import time
@@ -164,7 +163,7 @@ class HMI(object):
 
     def checker(self, data=None):
         ioloop = IOLoop.instance()
-        logging.error("[JFD] enter checker ")
+        logging.info("[hmi] enter checker")
 
         if data is not None and data != b'\0':
             self.last_write_time = 0
@@ -185,13 +184,13 @@ class HMI(object):
                 if msg.is_resp():
                     try:
                         original_msg, callback, datatype = self.queue.pop(0)
-                        logging.debug("[hmi] popped from queue: %s", original_msg)
+                        logging.info("[hmi] popped from queue: %s", original_msg)
                     except IndexError:
                         # something is wrong / not synced!!
                         logging.error("[hmi] NOT SYNCED")
                     else:
                         if callback is not None:
-                            logging.debug("[hmi] calling callback for %s", original_msg)
+                            logging.info("[hmi] calling callback for %s", original_msg)
                             callback(msg.process_resp(datatype))
                         self.process_queue()
                 else:
@@ -199,11 +198,11 @@ class HMI(object):
                         resp = 0 if resp else -1
                         if resp_args is None:
                             self.send_reply("%s %d" % (CMD_RESPONSE, resp))
-                            logging.debug('[hmi]     sent "resp %s"', resp)
+                            logging.info('[hmi]     sent "resp %s"', resp)
 
                         else:
                             self.send_reply("%s %d %s" % (CMD_RESPONSE, resp, resp_args))
-                            logging.debug('[hmi]     sent "resp %s %s"', resp, resp_args)
+                            logging.info('[hmi]     sent "resp %s %s"', resp, resp_args)
 
                         self.handling_response = False
                         if self.queue_idle:
@@ -213,14 +212,15 @@ class HMI(object):
                     msg.run_cmd(_callback)
 
         if self.need_flush != 0:
+            logging.info("[hmi] need_flush")
             if self.flush_io is not None:
                 ioloop.remove_timeout(self.flush_io)
             self.flush_io = ioloop.call_later(self.timeout/2, self.flush)
 
         try:
-            logging.debug("wait read_until ")
+            logging.info("[hmi] wait read_until ")
             self.sp.read_until(b'\0', self.checker)
-            logging.debug("continue read_until ")
+            logging.info("[hmi] continue read_until ")
         except serial.SerialException as e:
             logging.error("[hmi] error while reading %s", e)
 
@@ -229,15 +229,15 @@ class HMI(object):
         self.need_flush = 0
 
         if len(self.queue) < max(5, prev_queue) and not forced:
-            logging.debug("[hmi] flushing ignored")
+            logging.info("[hmi] flushing ignored")
             return
 
         # FUCK!
         logging.warn("[hmi] flushing queue as workaround now: %d in queue", len(self.queue))
-        self.sp.sp.flush()
-        self.sp.sp.flushInput()
-        self.sp.sp.flushOutput()
-        self.sp.close()
+        #self.sp.sp.flush()
+        #self.sp.sp.flushInput()
+        #self.sp.sp.flushOutput()
+        #self.sp.close()
         self.sp = None
 
         while len(self.queue) > 1:
@@ -265,11 +265,11 @@ class HMI(object):
         try:
             msg, callback, datatype = self.queue[0] # fist msg on the queue
         except IndexError:
-            logging.debug("[hmi] queue is empty, nothing to do")
+            logging.info("[hmi] queue is empty, nothing to do")
             self.queue_idle = True
             self.last_write_time = 0
         else:
-            logging.debug("[hmi] sending -> %s", msg)
+            logging.info("[hmi] sending -> %s", msg)
             try:
                 self.sp.write(msg.encode('utf-8') + b'\0')
             except StreamClosedError as e:
@@ -307,7 +307,7 @@ class HMI(object):
                     #callback(True)
             #else:
             self.queue.append((msg, callback, datatype))
-            logging.debug("[hmi] scheduling -> %s", msg)
+            logging.info("[hmi] scheduling -> %s", msg)
             if self.queue_idle and not self.handling_response:
                 self.process_queue()
             return
@@ -328,14 +328,8 @@ class HMI(object):
     def initial_state(self, bank_id, pedalboard_id, pedalboards, callback):
         numPedals = len(pedalboards)
 
-        if numPedals <= 9 or pedalboard_id < 4:
-            startIndex = 0
-        elif pedalboard_id+4 >= numPedals:
-            startIndex = numPedals - 9
-        else:
-            startIndex = pedalboard_id - 4
-
-        endIndex = min(startIndex+9, numPedals)
+        startIndex = 0
+        endIndex = numPedals
 
         data = '%s %d %d %d %d %d' % (CMD_INITIAL_STATE, numPedals, startIndex, endIndex, bank_id, pedalboard_id)
 
@@ -485,6 +479,7 @@ class HMI(object):
         self.send('%s %f %s %f' % (CMD_TUNER, freq, note, cents), callback)
 
     def bank_config(self, hw_id, action, callback):
+        logging.info("[hmi] bank_config")
         """
         configures bank addressings
 
diff --git a/mod/hmisocket.py b/mod/hmisocket.py
index 8e773396..493c1a68 100644
--- a/mod/hmisocket.py
+++ b/mod/hmisocket.py
@@ -29,7 +29,7 @@ from tornado import gen
 from mod.hmi import HMI, SerialIOStream
 from mod.development import FakeHMI
 import threading
-
+from mod import get_hardware_descriptor
 
 
 class EchoServer(TCPServer):
@@ -47,14 +47,22 @@ class EchoServer(TCPServer):
 class HMISocket(HMI):
 
     def __init__(self, port, callback):
-        logging.info("Launch HMISocket on port", port)
+        logging.info("Launch HMISocket on port %d" % port)
         self.sp = None 
         self.port = port
         self.queue = []
+        self.handling_response = False
+        self.need_flush = 0 # 0 means False, otherwise use it as counter
+        self.flush_io = None
+        self.timeout = 3
+        self.last_write_time = 0
         self.queue_idle = True
         self.initialized = False
         self.ioloop = ioloop.IOLoop.instance()
         self.callback = callback
+        self.bpm = [None]
+        self.hw_desc = get_hardware_descriptor()
+        self.hw_ids = []
         self.init()
 
     # overrides super class
@@ -66,6 +74,13 @@ class HMISocket(HMI):
             logging.error("Failed to open HMI socket port, error was: %s" % e)
             return
 
+    def hmi_reinit_cb(self):
+        logging.info("hmisocket: hmi_reinit_cb is called")
+        pass
+
+    def reinit_cb(self):
+        logging.info("hmisocket: reinit_cb is called")
+        pass
 
     @gen.coroutine
     def handle_stream(self, stream, address):
@@ -74,7 +89,7 @@ class HMISocket(HMI):
 
         # calls ping until ok is received
         def ping_callback(ok):
-            logging.error('[hmi_socket] ping_callback %s' % ok)
+            logging.info('[hmi_socket] ping_callback %s' % ok)
             if ok:
                 self.clear(clear_callback)
             else:
diff --git a/mod/host.py b/mod/host.py
index 8140aa01..a2c4934a 100644
--- a/mod/host.py
+++ b/mod/host.py
@@ -36,6 +36,7 @@ from tornado import gen, iostream
 from tornado.ioloop import IOLoop, PeriodicCallback
 import os, json, socket, time, logging
 import shutil
+import logging
 
 from mod import (
     TextFileFlusher,
@@ -360,6 +361,8 @@ class Host(object):
         else:
             self.jack_hwin_prefix  = "mod-monitor:in_"
             self.jack_hwout_prefix = "mod-monitor:out_"
+            
+        logging.info("[host] jack_hwout_prefix=%s jack_hwin_prefix=%s" %  (self.jack_hwin_prefix, self.jack_hwout_prefix))
 
         self.jack_slave_prefix = "mod-slave"
 
@@ -1057,11 +1060,12 @@ class Host(object):
         self.readsock.connect((self.addr[0], self.addr[1]+1), reader_check_response)
 
     def reader_connection_closed(self):
+        logging.error("[host] Reader connection is closed to address: " + str(self.addr));
         self.readsock = None
-        logging.error("Reader connection is closed to address: " + str(self.addr));
 
 
     def writer_connection_closed(self):
+        logging.error("[host] Writer connection is closed to address: " + str(self.addr));
         self.writesock = None
         self.crashed = True
         self.connected = False
@@ -1071,12 +1075,11 @@ class Host(object):
             self.memtimer.stop()
 
         self.msg_callback("stop")
-        logging.error("Writer connection is closed to address: " + str(self.addr));
 
         while True:
             try:
                 msg, callback, datatype = self._queue.pop(0)
-                logging.debug("[host] popped from queue: %s", msg)
+                logging.info("[host] popped from queue: %s", msg)
             except IndexError:
                 self._idle = True
                 break
@@ -1167,6 +1170,7 @@ class Host(object):
         )
 
     def setNavigateWithFootswitches(self, enabled, callback):
+        logging.info("[host] setNavigateWithFootswitches")
         def foot2_callback(_):
             acthw  = self.addressings.hmi_uri2hw_map["/hmi/footswitch2"]
             cfgact = BANK_FUNC_PEDALBOARD_NEXT if enabled else BANK_FUNC_NONE
@@ -1179,8 +1183,10 @@ class Host(object):
     # -----------------------------------------------------------------------------------------------------------------
 
     def initialize_hmi(self, uiConnected, callback):
+        logging.info("[host] initialize_hmi enter")
         # If UI is already connected, do nothing
         if uiConnected:
+            logging.info("[host] initialize_hmi uiConnected... do nothing")
             callback(True)
             return
 
@@ -1238,6 +1244,8 @@ class Host(object):
             cb = cb_footswitches if self.isBankFootswitchNavigationOn() else cb_migi_pb_prgch
             self.hmi.initial_state(bank_id, pedalboard_id, pedalboards, cb)
 
+
+        logging.info("[host] initialize_hmi initialized=%d" % self.hmi.initialized)
         if self.hmi.initialized:
             self.setNavigateWithFootswitches(False, cb_set_initial_state)
         else:
@@ -4633,7 +4641,7 @@ _:b%i
         callback(True, pedalboardsData)
 
     def hmi_load_bank_pedalboard(self, bank_id, pedalboard_id, callback):
-        logging.debug("hmi load bank pedalboard")
+        logging.debug("hmi load bank pedalboard bank=%s id=%s" % (bank_id, pedalboard_id))
 
         if bank_id < 0 or bank_id > len(self.banks):
             logging.error("Trying to load pedalboard using out of bounds bank id %i len=%i" % (bank_id, len(self.banks)))
diff --git a/mod/session.py b/mod/session.py
index 97f24ddc..00e93400 100644
--- a/mod/session.py
+++ b/mod/session.py
@@ -130,9 +130,11 @@ class Session(object):
 
     def reconnectApp(self):
         if self.host.readsock is not None:
+            logging.info("[session] reconnectApp: readsock.close()")
             self.host.readsock.close()
             self.host.readsock = None
         if self.host.writesock is not None:
+            logging.info("[session] reconnectApp: writesock.close()")
             self.host.writesock.close()
             self.host.writesock = None
         self.host.open_connection_if_needed(None)
@@ -144,6 +146,7 @@ class Session(object):
     def hmi_initialized_cb(self):
         self.hmi.initialized = not self.hmi.isFake()
         uiConnected = bool(len(self.websockets) > 0)
+        logging.info("[session] hmi_initialized_cb uiConnected=%d initialized=%d" % (uiConnected, self.hmi.initialized))
         yield gen.Task(self.host.initialize_hmi, uiConnected)
 
     # This is very nasty, sorry
@@ -156,9 +159,13 @@ class Session(object):
         # restart hmi
         os.system("/usr/bin/hmi-reset; /usr/bin/sleep 3")
         # reconnect to newly started hmi
-        self.hmi = HMI(HMI_SERIAL_PORT, HMI_BAUD_RATE, HMI_TIMEOUT, self.hmi_initialized_cb, self.hmi_reinit_cb)
+        if DEV_HMI:
+            self.hmi  = HMI(HMI_SERIAL_PORT, HMI_BAUD_RATE, HMI_TIMEOUT, self.hmi_initialized_cb, self.hmi_reinit_cb)
+        else:
+            self.hmi  = HMISocket(HMI_SOCKET_PORT, self.hmi_initialized_cb)
         self.host.reconnect_hmi(self.hmi)
 
+
     # -----------------------------------------------------------------------------------------------------------------
     # Webserver callbacks, called from the browser (see webserver.py)
     # These will be called as a reponse to an action in the browser.
diff --git a/mod/settings.py b/mod/settings.py
index 08173939..a8f1349f 100644
--- a/mod/settings.py
+++ b/mod/settings.py
@@ -17,6 +17,8 @@
 
 import os, sys
 from os.path import join
+import logging
+import logging.handlers
 
 DEV_ENVIRONMENT = bool(int(os.environ.get('MOD_DEV_ENVIRONMENT', False)))
 DEV_HMI = bool(int(os.environ.get('MOD_DEV_HMI', DEV_ENVIRONMENT)))
@@ -43,7 +45,7 @@ else:
 
 DATA_DIR = os.environ.get('MOD_DATA_DIR', os.path.expanduser('~/data'))
 CACHE_DIR = os.path.join(DATA_DIR, '.cache')
-USER_FILES_DIR = os.environ.get('MOD_USER_FILES_DIR', '/data/user-files')
+USER_FILES_DIR = os.environ.get('MOD_USER_FILES_DIR', '/')
 KEYS_PATH = os.environ.get('MOD_KEYS_PATH', join(DATA_DIR, 'keys'))
 BANKS_JSON_FILE = os.environ.get('MOD_BANKS_JSON', join(DATA_DIR, 'banks.json'))
 FAVORITES_JSON_FILE = os.environ.get('MOD_FAVORITES_JSON', join(DATA_DIR, 'favorites.json'))
@@ -122,3 +124,36 @@ PLAYBACK_PATH='/tmp/playback.ogg'
 UPDATE_MOD_OS_FILE='/data/{}'.format(os.environ.get('MOD_UPDATE_MOD_OS_FILE', 'modduo.tar').replace('*','cloud'))
 UPDATE_CC_FIRMWARE_FILE='/tmp/cc-firmware.bin'
 USING_256_FRAMES_FILE='/data/using-256-frames'
+
+def setupLogging():
+	access_log = logging.getLogger("tornado.access")
+	app_log = logging.getLogger("tornado.application")
+	gen_log = logging.getLogger("tornado.general")
+	logger = logging.getLogger("")
+	access_log.setLevel(logging.DEBUG)
+	app_log.setLevel(logging.DEBUG)
+	gen_log.setLevel(logging.DEBUG)
+	logger.setLevel(logging.DEBUG)
+
+	consoleHandler = logging.StreamHandler(sys.stdout)
+	consoleFormatter = logging.Formatter('%(name)s %(levelname)s %(funcName)s:%(lineno)d: %(message)s')
+	consoleHandler.formatter = consoleFormatter
+
+	syslogHandler = logging.handlers.SysLogHandler('/dev/log')
+	syslogFormatter = logging.Formatter('%(name)s %(levelname)s %(funcName)s:%(lineno)d: %(message)s')
+	syslogHandler.formatter = syslogFormatter
+
+	logger.addHandler(syslogHandler)
+	access_log.addHandler(syslogHandler)
+	app_log.addHandler(syslogHandler)
+	gen_log.addHandler(syslogHandler)
+
+	logger.addHandler(consoleHandler)
+	access_log.addHandler(consoleHandler)
+	app_log.addHandler(consoleHandler)
+	gen_log.addHandler(consoleHandler)
+
+	logger.info("Logging to syslog and console is ready.")
+	return logger
+
+logger = setupLogging()
diff --git a/mod/webserver.py b/mod/webserver.py
index 45a8d11f..9d6114f0 100644
--- a/mod/webserver.py
+++ b/mod/webserver.py
@@ -33,7 +33,6 @@ from tornado.template import Loader
 from tornado.util import unicode_type
 from uuid import uuid4
 import logging
-import logging.handlers
 
 from mod.profile import Profile
 from mod.settings import (APP, LOG, DEV_API,
@@ -72,36 +71,6 @@ class GlobalWebServerState(object):
 gState = GlobalWebServerState()
 gState.favorites = []
 
-def setupLogging():
-	access_log = logging.getLogger("tornado.access")
-	app_log = logging.getLogger("tornado.application")
-	gen_log = logging.getLogger("tornado.general")
-	logger = logging.getLogger("")
-	access_log.setLevel(logging.DEBUG)
-	app_log.setLevel(logging.DEBUG)
-	gen_log.setLevel(logging.DEBUG)
-	logger.setLevel(logging.DEBUG)
-
-	consoleHandler = logging.StreamHandler(sys.stdout)
-	consoleFormatter = logging.Formatter('%(name)s %(levelname)s %(funcName)s:%(lineno)d: %(message)s')
-	consoleHandler.formatter = consoleFormatter
-
-	syslogHandler = logging.handlers.SysLogHandler('/dev/log')
-	syslogFormatter = logging.Formatter('%(name)s %(levelname)s %(funcName)s:%(lineno)d: %(message)s')
-	syslogHandler.formatter = syslogFormatter
-
-	logger.addHandler(syslogHandler)
-	access_log.addHandler(syslogHandler)
-	app_log.addHandler(syslogHandler)
-	gen_log.addHandler(syslogHandler)
-
-	logger.addHandler(consoleHandler)
-	access_log.addHandler(consoleHandler)
-	app_log.addHandler(consoleHandler)
-	gen_log.addHandler(consoleHandler)
-
-	logger.info("Logging to syslog and console is ready.")
-	return
 
 
 @gen.coroutine
@@ -2350,15 +2319,14 @@ def prepare(isModApp = False):
         enable_pretty_logging()
 
     def checkhost():
-        if SESSION.host.readsock is None or SESSION.host.writesock is None:
+        if SESSION.host.readsock is None:
+            logging.info("[webserver] checkhost: Readsock none")
 
-            if SESSION.host.readsock is None:
-                logging.info("Readsock none")
+        if SESSION.host.writesock is None:
+            logging.info("[webserver] checkhost: Writesock none")
 
-            if SESSION.host.writesock is None:
-                logging.info("Writesock none")
-
-            logging.error("Host failed to initialize, is the backend running? Retry...")
+        if SESSION.host.readsock is None or SESSION.host.writesock is None:
+            logging.error("[webserver] checkhost: Host failed to initialize, is the backend running? Retry...")
             SESSION.host.open_connection_if_needed(None)
             ioinstance.call_later(3.0, checkhost)
             #SESSION.host.close_jack()
@@ -2379,7 +2347,6 @@ def stop():
     IOLoop.instance().stop()
 
 def run():
-    setupLogging()
     prepare()
     start()
 
