From 853e17b7c73d0a525595a93d8c618fb6ff88d5d5 Mon Sep 17 00:00:00 2001
From: auto3000 <auto3000@users.noreply.github.com>
Date: Wed, 28 Jun 2017 16:24:03 +0200
Subject: [PATCH 08/16] logging: replace print with logging

%% original patch: 0008-logging-replace-print-with-logging.patch
---
 mod/development.py |  4 +--
 mod/hmi.py         | 16 ++++++------
 mod/hmisocket.py   | 27 +++-----------------
 mod/host.py        | 62 +++++++++++++++++++++++-----------------------
 mod/session.py     | 10 ++++----
 mod/webserver.py   |  5 ++--
 modtools/utils.py  |  2 +-
 7 files changed, 53 insertions(+), 73 deletions(-)

diff --git a/mod/development.py b/mod/development.py
index bba632b7..0797e9f5 100644
--- a/mod/development.py
+++ b/mod/development.py
@@ -31,7 +31,7 @@ class FakeHMI(HMI):
         IOLoop.instance().add_callback(callback)
 
     def send(self, msg, callback=None, datatype='int'):
-        logging.info('FakeHMI send msg='+msg)
+        logging.info('fake send msg='+msg)
         if callback is None:
             return
         if datatype == 'boolean':
@@ -73,7 +73,7 @@ class FakeHost(Host):
 
     # send data to host, set modified flag to true
     def send_modified(self, msg, callback=None, datatype='int'):
-        print("JFD FakeHMI send_modified %s" % msg )
+        logging.info("FakeHMI send_modified %s" % msg )
         self.pedalboard_modified = True
         if callback is not None:
             callback(True)
diff --git a/mod/hmi.py b/mod/hmi.py
index 7f577142..ff447a0d 100644
--- a/mod/hmi.py
+++ b/mod/hmi.py
@@ -89,7 +89,7 @@ class SerialIOStream(BaseIOStream):
             else:
                 r = self.sp.read_bytes(self.read_chunk_size)
         except Exception as inst:
-            print ('SerialIOStream: failed to read from HMI serial ', inst)
+            logging.error('SerialIOStream: failed to read from HMI serial ' +  inst)
             return None
         if r == '':
             return None
@@ -130,7 +130,7 @@ class HMI(object):
             sp.flushInput()
             sp.flushOutput()
         except Exception as e:
-            print("ERROR: Failed to open HMI serial port, error was:\n%s" % e)
+            logging.error("Failed to open HMI serial port, error was:\n%s" % e)
             return
 
         self.sp = SerialIOStream(sp)
@@ -168,7 +168,7 @@ class HMI(object):
 
         if data is not None and data != b'\0':
             self.last_write_time = 0
-            logging.debug('[hmi] received <- %s', data)
+            logging.info('[hmi] received <- %s' % repr(data))
             try:
                 msg = Protocol(data.decode("utf-8", errors="ignore"))
             except ProtocolError as e:
@@ -218,9 +218,9 @@ class HMI(object):
             self.flush_io = ioloop.call_later(self.timeout/2, self.flush)
 
         try:
-            logging.error("[JFD] wait read_until ")
+            logging.debug("wait read_until ")
             self.sp.read_until(b'\0', self.checker)
-            logging.error("[JFD] continue read_until ")
+            logging.debug("continue read_until ")
         except serial.SerialException as e:
             logging.error("[hmi] error while reading %s", e)
 
@@ -255,13 +255,11 @@ class HMI(object):
         #os.system("touch /tmp/reset-hmi; kill -9 {}".format(os.getpid()))
 
     def process_queue(self):
-        logging.info("[hmi] process_queue: JFD entry")
         if self.sp is None:
             logging.error("[hmi] process_queue: self.sp is None")
             return
 
         def no_callback():
-            logging.info("[hmi] process_queue: JFD no_callback")
             pass
 
         try:
@@ -286,7 +284,7 @@ class HMI(object):
         self.send("{} -1".format(CMD_RESPONSE), None)
 
     def send(self, msg, callback, datatype='int'):
-        logging.error('[JFD] send msg=' + msg)
+        logging.info('send msg=' + msg)
         if self.sp is None:
             return
 
@@ -315,7 +313,7 @@ class HMI(object):
             return
 
         def no_callback2():
-            logging.error('[JFD] send: no_callback2')
+            logging.error('send: no_callback2')
             pass
 
         # is resp, just send
diff --git a/mod/hmisocket.py b/mod/hmisocket.py
index 82f71d1c..8e773396 100644
--- a/mod/hmisocket.py
+++ b/mod/hmisocket.py
@@ -40,8 +40,6 @@ class EchoServer(TCPServer):
 
     @gen.coroutine
     def handle_stream(self, stream, address):
-        #threading.Thread(target=self.my_hmisocket.handle_stream, args=(stream, address)).start()
-        #yield
         logging.info('[EchoServer] connection from %s' % repr(address))
         yield self.my_hmisocket.handle_stream(stream, address)
 
@@ -49,8 +47,8 @@ class EchoServer(TCPServer):
 class HMISocket(HMI):
 
     def __init__(self, port, callback):
-        print("JFD launch HMISocket on port", port)
-        self.sp = None #FakeHMI().sp
+        logging.info("Launch HMISocket on port", port)
+        self.sp = None 
         self.port = port
         self.queue = []
         self.queue_idle = True
@@ -64,9 +62,8 @@ class HMISocket(HMI):
         try:
             server = EchoServer(ioloop.IOLoop.instance(), self, self.callback)
             server.listen(self.port)
-            #server.start(0)  # Forks multiple sub-processes
         except Exception as e:
-            print("ERROR: Failed to open HMI socket port, error was: %s" % e)
+            logging.error("Failed to open HMI socket port, error was: %s" % e)
             return
 
 
@@ -83,24 +80,8 @@ class HMISocket(HMI):
             else:
                 self.ioloop.add_timeout(timedelta(seconds=1), lambda:self.ping(self.ping_callback))
 
-#        def no_callback():
-#            pass
-        #stream.write(b"Hello my friend JFD protocol\r\n\r\n", no_callback)
         logging.info('[hmi_socket] connection from %s' % repr(address))
-        #self.sp = SerialIOStream(stream)
         self.sp = stream
         self.ping(ping_callback)
-        #logging.info('[hmi_socket] ping passed')
-        #data = yield stream.read_until(b"\0")
         self.checker()
-        #logging.info('[hmi_socket] checker passed')
-
-        while False:
-        #self.sp.write(b"Hello my friend JFD protocol2222\r\n\r\n")
-            try:
-                data = yield stream.read_until(b"\n")
-                logging.info('[hmi_socket] receive %s' % data)
-                yield stream.write(data)
-            except StreamClosedError:
-                break
-        #self.sp = FakeHMI().sp
+
diff --git a/mod/host.py b/mod/host.py
index c647b093..3670e4ad 100644
--- a/mod/host.py
+++ b/mod/host.py
@@ -635,7 +635,7 @@ class Host(object):
                     optdataLen = len(optdata)
 
                     if numBytesFree-optdataLen-2 < 0:
-                        print("WARNING: Preventing sending too many options to addressing (stopped at %i)" % currentNum)
+                        logging.info("WARNING: Preventing sending too many options to addressing (stopped at %i)" % currentNum)
                         if rvalue >= currentNum:
                             rvalue = 0.0
                         rmaximum = currentNum
@@ -689,7 +689,7 @@ class Host(object):
                                                                 ), callback, datatype='boolean')
             return
 
-        print("ERROR: Invalid addressing requested for", actuator)
+        logging.error("Invalid addressing requested for", actuator)
         callback(False)
         return
 
@@ -721,7 +721,7 @@ class Host(object):
                 callback(True)
             return
 
-        print("ERROR: Invalid unaddressing requested")
+        logging.error("Invalid unaddressing requested")
         callback(False)
         return
 
@@ -803,9 +803,9 @@ class Host(object):
                 return 0.0
             return float(pluginData['mapPresets'].index(pluginData['preset']))
 
-        print(json.dumps(pluginData))
-        print(json.dumps(pluginData['ports']))
-        print(json.dumps( pluginData['ports'][portsymbol]))
+        #print(json.dumps(pluginData))
+        #print(json.dumps(pluginData['ports']))
+        #print(json.dumps( pluginData['ports'][portsymbol]))
         return pluginData['ports'][portsymbol]
 
     def addr_task_store_address_data(self, instance_id, portsymbol, data):
@@ -1036,7 +1036,7 @@ class Host(object):
         self._idle = False
         self._queue = []
 
-        print ( "JFD Main socket, used for sending messages ")
+        logging.info( "Main socket, used for sending messages ")
         # Main socket, used for sending messages
         self.writesock = iostream.IOStream(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
         self.writesock.set_close_callback(self.writer_connection_closed)
@@ -1328,7 +1328,7 @@ class Host(object):
                     pluginData['bypassed'] = bool(value)
 
                 elif portsymbol == ":presets":
-                    print("presets changed by backend", value)
+                    logging.info("presets changed by backend", value)
                     abort_catcher = self.abort_previous_loading_progress("process_read_message_body")
                     value = int(value)
                     if value < 0 or value >= len(pluginData['mapPresets']):
@@ -1620,7 +1620,7 @@ class Host(object):
 
     # send data to host, set modified flag to true
     def send_modified(self, msg, callback=None, datatype='int'):
-        print("JFD send_modified %s" % msg )
+        logging.info("send_modified msg=%s" % msg )
         self.pedalboard_modified = True
 
         if self.crashed:
@@ -1876,7 +1876,7 @@ class Host(object):
 
     def add_bundle(self, bundlepath, callback):
         if is_bundle_loaded(bundlepath):
-            print("NOTE: Skipped add_bundle, already in world")
+            logging.info("NOTE: Skipped add_bundle, already in world")
             callback((False, "Bundle already loaded"))
             return
 
@@ -1888,7 +1888,7 @@ class Host(object):
 
     def remove_bundle(self, bundlepath, isPluginBundle, callback):
         if not is_bundle_loaded(bundlepath):
-            print("NOTE: Skipped remove_bundle, not in world")
+            logging.info("NOTE: Skipped remove_bundle, not in world")
             callback((False, "Bundle not loaded"))
             return
 
@@ -2289,7 +2289,7 @@ class Host(object):
         pluginData  = self.plugins[instance_id]
 
         if symbol in pluginData['designations']:
-            print("ERROR: Trying to modify a specially designated port '%s', stop!" % symbol)
+            logging.error("Trying to modify a specially designated port '%s', stop!" % symbol)
             callback(False)
             return
 
@@ -2858,9 +2858,9 @@ class Host(object):
         return "effect_%d:%s" % (instance_id, portsymbol)
 
     def connect(self, port_from, port_to, callback):
-        print("JFD connect host.py")
+        logging.info("Connect host.py")
         if (port_from, port_to) in self.connections:
-            print("NOTE: Requested connection already exists")
+            logging.info("NOTE: Requested connection already exists")
             callback(True)
             return
 
@@ -2870,7 +2870,7 @@ class Host(object):
                 self.connections.append((port_from, port_to))
                 self.msg_callback("connect %s %s" % (port_from, port_to))
             else:
-                print("ERROR: backend failed to connect ports: '%s' => '%s'" % (port_from, port_to))
+                logging.error("backend failed to connect ports: '%s' => '%s'" % (port_from, port_to))
 
         self.send_modified("connect %s %s" % (self._fix_host_connection_port(port_from),
                                               self._fix_host_connection_port(port_to)),
@@ -2883,14 +2883,14 @@ class Host(object):
             self.msg_callback("disconnect %s %s" % (port_from, port_to))
 
             if not ok:
-                print("ERROR: disconnect '%s' => '%s' failed" % (port_from, port_to))
+                logging.error("disconnect '%s' => '%s' failed" % (port_from, port_to))
 
             self.pedalboard_modified = True
 
             try:
                 self.connections.remove((port_from, port_to))
             except:
-                print("NOTE: Requested '%s' => '%s' connection doesn't exist" % (port_from, port_to))
+                logging.info("NOTE: Requested '%s' => '%s' connection doesn't exist" % (port_from, port_to))
 
         if len(self.connections) == 0:
             return host_callback(False)
@@ -2899,13 +2899,13 @@ class Host(object):
         try:
             port_from_2 = self._fix_host_connection_port(port_from)
         except:
-            print("NOTE: Requested '%s' source port doesn't exist, assume disconnected" % port_from)
+            logging.info("NOTE: Requested '%s' source port doesn't exist, assume disconnected" % port_from)
             return host_callback(True)
 
         try:
             port_to_2 = self._fix_host_connection_port(port_to)
         except:
-            print("NOTE: Requested '%s' target port doesn't exist, assume disconnected" % port_to)
+            logging.info("NOTE: Requested '%s' target port doesn't exist, assume disconnected" % port_to)
             return host_callback(True)
 
         host_callback(disconnect_jack_ports(port_from_2, port_to_2))
@@ -3170,7 +3170,7 @@ class Host(object):
             pdata = initial_snapshot.get(p['instance'], None)
 
             if pdata is None:
-                print("WARNING: Pedalboard preset missing data for instance name '%s'" % p['instance'])
+                logging.info("WARNING: Pedalboard preset missing data for instance name '%s'" % p['instance'])
                 continue
 
             p['bypassed'] = pdata['bypassed']
@@ -4236,7 +4236,7 @@ _:b%i
         operational_mode = extras.get('operational_mode', '=')
 
         if pluginData is None:
-            print("ERROR: Trying to address non-existing plugin instance %i: '%s'" % (instance_id, instance))
+            logging.error("Trying to address non-existing plugin instance %i: '%s'" % (instance_id, instance))
             callback(False)
             return
 
@@ -4338,7 +4338,7 @@ _:b%i
         is_hmi_actuator = self.addressings.is_hmi_actuator(actuator_uri)
 
         if is_hmi_actuator and not self.hmi.initialized:
-            print("WARNING: Cannot address to HMI at this point")
+            logging.info("WARNING: Cannot address to HMI at this point")
             callback(False)
             return
 
@@ -4619,19 +4619,19 @@ _:b%i
         logging.debug("hmi load bank pedalboard")
 
         if bank_id < 0 or bank_id > len(self.banks):
-            print("ERROR: Trying to load pedalboard using out of bounds bank id %i" % (bank_id))
+            logging.error("Trying to load pedalboard using out of bounds bank id %i" % (bank_id))
             callback(False)
             return
 
         try:
             pedalboard_id = int(pedalboard_id)
         except:
-            print("ERROR: Trying to load pedalboard using invalid pedalboard_id '%s'" % (pedalboard_id))
+            logging.error("Trying to load pedalboard using invalid pedalboard_id '%s'" % (pedalboard_id))
             callback(False)
             return
 
         if self.next_hmi_pedalboard_to_load is not None:
-            print("NOTE: Delaying loading of %i:%i" % (bank_id, pedalboard_id))
+            logging.info("NOTE: Delaying loading of %i:%i" % (bank_id, pedalboard_id))
             self.next_hmi_pedalboard_to_load = (bank_id, pedalboard_id)
             callback(True)
             return
@@ -4643,7 +4643,7 @@ _:b%i
             pedalboards = bank['pedalboards']
 
         if pedalboard_id < 0 or pedalboard_id >= len(pedalboards):
-            print("ERROR: Trying to load pedalboard using out of bounds pedalboard id %i" % (pedalboard_id))
+            logging.error("Trying to load pedalboard using out of bounds pedalboard id %i" % (pedalboard_id))
             callback(False)
             return
 
@@ -4658,9 +4658,9 @@ _:b%i
             if self.next_hmi_pedalboard_to_load is None:
                 return
             if ok:
-                print("NOTE: Delayed loading of %i:%i has started" % self.next_hmi_pedalboard_to_load)
+                logging.info("Delayed loading of %i:%i has started" % self.next_hmi_pedalboard_to_load)
             else:
-                print("ERROR: Delayed loading of %i:%i failed!" % self.next_hmi_pedalboard_to_load)
+                logging.error("Delayed loading of %i:%i failed!" % self.next_hmi_pedalboard_to_load)
 
         def load_finish_callback(_):
             self.processing_pending_flag = False
@@ -4671,13 +4671,13 @@ _:b%i
             self.hmi.set_snapshot_name(name, load_finish_callback)
 
         def pb_host_loaded_callback(_):
-            print("NOTE: Loading of %i:%i finished" % (bank_id, pedalboard_id))
+            logging.info("Loading of %i:%i finished" % (bank_id, pedalboard_id))
 
             next_pedalboard = self.next_hmi_pedalboard_to_load
             self.next_hmi_pedalboard_to_load = None
 
             if next_pedalboard is None:
-                logging.error("ERROR: Inconsistent state detected when loading next pedalboard (will not activate audio)")
+                logging.error("Inconsistent state detected when loading next pedalboard (will not activate audio)")
                 return
 
             # Check if there's a pending pedalboard to be loaded
@@ -4849,7 +4849,7 @@ _:b%i
                     rolling = bool(value > 0.5)
                     self.set_transport_rolling(rolling, True, False, True)
             else:
-                print("ERROR: Trying to set value for the wrong pedalboard port:", portsymbol)
+                logging.error("Trying to set value for the wrong pedalboard port:", portsymbol)
                 callback(False)
                 return
 
diff --git a/mod/session.py b/mod/session.py
index 1ee978b7..97f24ddc 100644
--- a/mod/session.py
+++ b/mod/session.py
@@ -38,9 +38,9 @@ if DEV_HOST:
     Host = FakeHost
 else:
     from mod.host import Host
-    print("JFD start Host session.py");
+    logging.info("Start Host session.py");
 
-print("JFD start session.py");
+logging.info("Start session.py");
 
 class UserPreferences(object):
     def __init__(self):
@@ -93,7 +93,7 @@ class Session(object):
             self.hmi  = HMISocket(HMI_SOCKET_PORT, self.hmi_initialized_cb)
             hmiOpened = True #self.hmi.sp is not None
 
-        #print("Using HMI =>", hmiOpened)
+        logging.info("Using HMI =>" + str(hmiOpened))
 
         if not hmiOpened:
             self.hmi = FakeHMI(self.hmi_initialized_cb)
@@ -192,12 +192,12 @@ class Session(object):
 
     # Connect 2 ports
     def web_connect(self, port_from, port_to, callback):
-        print("JFD web_disconnect")
+        logging.info("web_connect")
         self.host.connect(port_from, port_to, callback)
 
     # Disconnect 2 ports
     def web_disconnect(self, port_from, port_to, callback):
-        print("JFD web_disconnect")
+        logging.info("web_disconnect")
         self.host.disconnect(port_from, port_to, callback)
 
     # Save the current pedalboard
diff --git a/mod/webserver.py b/mod/webserver.py
index ea14a68b..462dda02 100644
--- a/mod/webserver.py
+++ b/mod/webserver.py
@@ -32,6 +32,8 @@ from tornado.ioloop import IOLoop
 from tornado.template import Loader
 from tornado.util import unicode_type
 from uuid import uuid4
+import logging
+
 
 from mod.profile import Profile
 from mod.settings import (APP, LOG, DEV_API,
@@ -2313,7 +2315,6 @@ def prepare(isModApp = False):
     if LOG:
         from tornado.log import enable_pretty_logging
         enable_pretty_logging()
-        print( "JFD enable_pretty_logging");
 
     def checkhost():
         if SESSION.host.readsock is None or SESSION.host.writesock is None:
@@ -2336,7 +2337,7 @@ def prepare(isModApp = False):
     ioinstance.add_callback(checkhost)
 
 def start():
-    print ("JFD start instance")
+    logging.info("Start ioloop instance")
     IOLoop.instance().start()
 
 def stop():
diff --git a/modtools/utils.py b/modtools/utils.py
index 14f5b10e..ab899d45 100644
--- a/modtools/utils.py
+++ b/modtools/utils.py
@@ -860,7 +860,7 @@ def get_jack_hardware_ports(isAudio, isOutput):
     return charPtrPtrToStringList(utils.get_jack_hardware_ports(isAudio, isOutput))
 
 def connect_jack_ports(port1, port2):
-    print("JFD connect JACK ");
+    logging.info("Connect JACK ");
     return bool(utils.connect_jack_ports(port1.encode("utf-8"), port2.encode("utf-8")))
 
 def connect_jack_midi_output_ports(port):
-- 
2.17.1

