From 8e8561e00ae278212c062e03c9f0a238a3e03bfe Mon Sep 17 00:00:00 2001
From: auto3000 <auto3000@users.noreply.github.com>
Date: Fri, 31 Mar 2017 18:19:34 +0000
Subject: [PATCH 03/16] hmi: add HMI socket

%% original patch: 0003-hmi-add-HMI-socket.patch
---
 mod/hmi_socket.py | 65 ----------------------------------
 mod/hmisocket.py  | 90 +++++++++++++++++++++++++++++++++++++++++++++++
 mod/session.py    |  7 +++-
 mod/settings.py   |  1 +
 4 files changed, 97 insertions(+), 66 deletions(-)
 delete mode 100644 mod/hmi_socket.py
 create mode 100644 mod/hmisocket.py

diff --git a/mod/hmi_socket.py b/mod/hmi_socket.py
deleted file mode 100644
index 1a645384..00000000
--- a/mod/hmi_socket.py
+++ /dev/null
@@ -1,65 +0,0 @@
-# coding: utf-8
-
-# Copyright 2017 pedalpi
-#
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-import errno
-import functools
-import socket
-from tornado import ioloop, iostream
-
-class HMI_socket(HMI):
-    def send_request():
-        sp.write(b"Hello my friend JFD protocol\r\n\r\n")
-
-    def connection_ready(sock, fd, events):
-        while True:
-            try:
-                connection, address = sock.accept()
-            except socket.error, e:
-                if e[0] not in (errno.EWOULDBLOCK, errno.EAGAIN):
-                    raise
-                return
-            else:
-                logging.error('[hmi_socket] connection from %s' % repr(address))
-                connection.setblocking(0)
-                self.sp = tornado.iostream.IOStream(connection)
-
-    # overrides super class
-    def init(self, callback):
-        self.sp = FakeHMI()
-
-        try:
-            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
-            sock.setblocking(0)
-            sock.bind(("", 9999))
-            sock.listen(1)
-            sp = tornado.iostream.IOStream(sock)
-        except Exception as e:
-            print("ERROR: Failed to open HMI socket port, error was:\n%s" % e)
-            return
-
-        def clear_callback(ok):
-            callback()
-
-        # calls ping until ok is received
-        def ping_callback(ok):
-            if ok:
-                self.clear(clear_callback)
-            else:
-                self.ioloop.add_timeout(timedelta(seconds=1), lambda:self.ping(ping_callback))
-
-        self.ping(ping_callback)
-        self.checker()
diff --git a/mod/hmisocket.py b/mod/hmisocket.py
new file mode 100644
index 00000000..7c508ce1
--- /dev/null
+++ b/mod/hmisocket.py
@@ -0,0 +1,90 @@
+# coding: utf-8
+
+# Copyright 2017 pedalpi
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+import errno
+import functools
+import socket
+import functools
+import os, json, logging
+
+from tornado import ioloop, iostream
+from tornado.tcpserver import TCPServer
+from tornado.iostream import StreamClosedError
+from tornado import gen
+
+from mod.hmi import HMI, SerialIOStream
+from mod.development import FakeHMI
+
+class EchoServer(TCPServer):
+    def __init__(self, my_ioloop, my_hmisocket, callback):
+        super().__init__(my_ioloop)
+        self.callback = callback
+        self.my_hmisocket = my_hmisocket
+
+    @gen.coroutine
+    def handle_stream(self, stream, address):
+        self.my_hmisocket.handle_stream(stream, address)
+
+
+class HMISocket(HMI):
+
+    def __init__(self, port, callback):
+        print("JFD launch HMISocket on port", port)
+        self.sp = FakeHMI().sp
+        self.port = port
+        self.queue = []
+        self.queue_idle = True
+        self.initialized = False
+        self.ioloop = ioloop.IOLoop.instance()
+        self.callback = callback
+        self.init()
+
+    # overrides super class
+    def init(self):
+
+        try:
+            server = EchoServer(ioloop.IOLoop.instance(), self, self.callback)
+            server.listen(self.port)
+        except Exception as e:
+            print("ERROR: Failed to open HMI socket port, error was: %s" % e)
+            return
+
+    def clear_callback(ok):
+        self.callback()
+
+    # calls ping until ok is received
+    def ping_callback(ok):
+        logging.error('[hmi_socket] ping_callback %s' % ok)
+        if ok:
+            self.clear(self.clear_callback)
+        else:
+            self.ioloop.add_timeout(timedelta(seconds=1), lambda:self.ping(self.ping_callback))
+
+    def handle_stream(self, stream, address):
+        logging.info('[hmi_socket] connection from %s' % repr(address))
+        self.sp = SerialIOStream(stream)
+        #while True:
+        stream.write(b"Hello my friend JFD protocol\r\n\r\n")
+        #    try:
+        #        data = yield stream.read_until(b"\n")
+        #        yield stream.write(data)
+        #    except StreamClosedError:
+        #        break
+        #self.sp = FakeHMI().sp
+        #self.ping(self.ping_callback)
+        self.clear(self.clear_callback)
+        self.checker()
diff --git a/mod/session.py b/mod/session.py
index c268fcb0..8410ef99 100644
--- a/mod/session.py
+++ b/mod/session.py
@@ -30,7 +30,9 @@ from mod.screenshot import ScreenshotGenerator
 from mod.settings import (LOG,
                           DEV_ENVIRONMENT, DEV_HMI, DEV_HOST,
                           HMI_SERIAL_PORT, HMI_BAUD_RATE, HMI_TIMEOUT,
+                          HMI_SOCKET_PORT,
                           PREFERENCES_JSON_FILE, UNTITLED_PEDALBOARD_NAME)
+from mod.hmisocket import HMISocket
 
 if DEV_HOST:
     Host = FakeHost
@@ -84,9 +86,12 @@ class Session(object):
         # Try to open real HMI
         hmiOpened = False
 
-        if not DEV_HMI:
+        if DEV_HMI:
             self.hmi  = HMI(HMI_SERIAL_PORT, HMI_BAUD_RATE, HMI_TIMEOUT, self.hmi_initialized_cb, self.hmi_reinit_cb)
             hmiOpened = self.hmi.sp is not None
+        else:
+            self.hmi  = HMISocket(HMI_SOCKET_PORT, self.hmi_initialized_cb)
+            hmiOpened = self.hmi.sp is not None
 
         #print("Using HMI =>", hmiOpened)
 
diff --git a/mod/settings.py b/mod/settings.py
index d8fbfda8..08173939 100644
--- a/mod/settings.py
+++ b/mod/settings.py
@@ -66,6 +66,7 @@ LV2_PEDALBOARDS_DIR = os.path.expanduser("~/.pedalboards/")
 HMI_BAUD_RATE = os.environ.get('MOD_HMI_BAUD_RATE', 10000000)
 HMI_SERIAL_PORT = os.environ.get('MOD_HMI_SERIAL_PORT', "/dev/ttyUSB0")
 HMI_TIMEOUT = int(os.environ.get('MOD_HMI_TIMEOUT', 0))
+HMI_SOCKET_PORT = os.environ.get('MOD_HMI_SOCKET_PORT', 9999)
 
 MODEL_CPU = os.environ.get('MOD_MODEL_CPU', None)
 MODEL_TYPE = os.environ.get('MOD_MODEL_TYPE', None)
-- 
2.17.1

