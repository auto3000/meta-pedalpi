From 175d3c2355f116adf114c5308b10459c4494e577 Mon Sep 17 00:00:00 2001
From: auto3000 <auto3000@users.noreply.github.com>
Date: Sat, 21 Oct 2017 16:15:25 +0200
Subject: [PATCH 15/16] host: add retry mechanism to connect mod-host socket

%% original patch: 0015-host-add-retry-mechanism-to-connect-mod-host-socket.patch
---
 mod/host.py      | 27 ++++++++++++++++++++++-----
 mod/webserver.py | 10 ++++++----
 2 files changed, 28 insertions(+), 9 deletions(-)

diff --git a/mod/host.py b/mod/host.py
index 3670e4ad..8140aa01 100644
--- a/mod/host.py
+++ b/mod/host.py
@@ -221,6 +221,7 @@ def get_all_good_and_bad_pedalboards():
             "version": 0,
         })
 
+    logging.info("get_all_good_pedalboards returns %i good pedalboards in a total of %i pedalboards." % (len(allpedals), len(goodpedals)) )
     return goodpedals, badbundles
 
 # class to map between numeric ids and string instances
@@ -903,7 +904,7 @@ class Host(object):
     @gen.coroutine
     def init_host(self):
         self.init_jack()
-        self.open_connection_if_needed(None)
+        # self.open_connection_if_needed(None)
 
         # Disable plugin processing while initializing
         yield gen.Task(self.send_notmodified, "feature_enable processing 0", datatype='boolean')
@@ -1016,6 +1017,12 @@ class Host(object):
             self.report_current_state(websocket)
             return
 
+        if self.readsock is None or self.writesock is None:
+            self._idle = False
+            self.open_host_connection(websocket)
+
+    def open_host_connection(self, websocket):
+
         def reader_check_response():
             self.process_read_queue()
 
@@ -1051,6 +1058,8 @@ class Host(object):
 
     def reader_connection_closed(self):
         self.readsock = None
+        logging.error("Reader connection is closed to address: " + str(self.addr));
+
 
     def writer_connection_closed(self):
         self.writesock = None
@@ -1062,6 +1071,7 @@ class Host(object):
             self.memtimer.stop()
 
         self.msg_callback("stop")
+        logging.error("Writer connection is closed to address: " + str(self.addr));
 
         while True:
             try:
@@ -1615,8 +1625,15 @@ class Host(object):
         logging.debug("[host] sending -> %s", msg)
 
         encmsg = "%s\0" % str(msg)
-        self.writesock.write(encmsg.encode("utf-8"))
-        self.writesock.read_until(b"\0", check_response)
+        try:
+            self.writesock.write(encmsg.encode("utf-8"))
+            self.writesock.read_until(b"\0", check_response)
+        except Exception as error:
+            socket = self.writesock
+            self.writesock = None
+            logging.exception(error)
+            logging.error("Close writesock")
+            socket.close()
 
     # send data to host, set modified flag to true
     def send_modified(self, msg, callback=None, datatype='int'):
@@ -4619,7 +4636,7 @@ _:b%i
         logging.debug("hmi load bank pedalboard")
 
         if bank_id < 0 or bank_id > len(self.banks):
-            logging.error("Trying to load pedalboard using out of bounds bank id %i" % (bank_id))
+            logging.error("Trying to load pedalboard using out of bounds bank id %i len=%i" % (bank_id, len(self.banks)))
             callback(False)
             return
 
@@ -4643,7 +4660,7 @@ _:b%i
             pedalboards = bank['pedalboards']
 
         if pedalboard_id < 0 or pedalboard_id >= len(pedalboards):
-            logging.error("Trying to load pedalboard using out of bounds pedalboard id %i" % (pedalboard_id))
+            logging.error("Trying to load pedalboard using out of bounds pedalboard id %i len=%i" % (pedalboard_id, len(pedalboards)))
             callback(False)
             return
 
diff --git a/mod/webserver.py b/mod/webserver.py
index a7d9b999..866b3abf 100644
--- a/mod/webserver.py
+++ b/mod/webserver.py
@@ -2357,10 +2357,12 @@ def prepare(isModApp = False):
             if SESSION.host.writesock is None:
                 logging.info("Writesock none")
 
-            logging.error("Host failed to initialize, is the backend running?")
-            SESSION.host.close_jack()
-            if not isModApp:
-                sys.exit(1)
+            logging.error("Host failed to initialize, is the backend running? Retry...")
+            SESSION.host.open_connection_if_needed(None)
+            ioinstance.call_later(3.0, checkhost)
+            #SESSION.host.close_jack()
+            #if not isModApp:
+            #    sys.exit(1)
 
         elif not SESSION.host.connected:
             ioinstance.call_later(0.2, checkhost)
-- 
2.17.1

