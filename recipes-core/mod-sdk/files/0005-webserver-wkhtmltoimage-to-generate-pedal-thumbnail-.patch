From 0a3f403cda0a5545d7a68a3f80e9fc9f7a78047d Mon Sep 17 00:00:00 2001
From: auto3000 <auto3000@users.noreply.github.com>
Date: Sun, 4 Feb 2018 19:29:35 +0200
Subject: [PATCH 4/6] webserver: wkhtmltoimage to generate pedal thumbnail if
 present

The thumbnails are now generated by wkhtmltoimage or PhantomJS if
present.

PhantomJS was used to generate thumbnails but PhantomJS is not
maintained anymore. The toolsuite wkhtmltopdf provides a tool
'wkhtmltoimage' for a similar feature. The tool 'convert' is also used
to enhance the generate thumbnail to add transparency in background.
---
 modsdk/settings.py  |  8 +++---
 modsdk/webserver.py | 77 +++++++++++++++++++++++++++++++++++++++++------------
 2 files changed, 65 insertions(+), 20 deletions(-)

diff --git a/modsdk/settings.py b/modsdk/settings.py
index de43cd3..72ccf9b 100644
--- a/modsdk/settings.py
+++ b/modsdk/settings.py
@@ -28,10 +28,12 @@ DEFAULT_ICON_IMAGE = {
     'thumbnail' : os.path.join(HTML_DIR, 'resources/pedals/default-thumbnail.png'),
     'screenshot': os.path.join(HTML_DIR, 'resources/pedals/default-screenshot.png')
 }
-if os.path.exists('/usr/bin/phantomjs'):
-    PHANTOM_BINARY = '/usr/bin/phantomjs'
-else:
+CONVERT_BINARY='/usr/bin/convert'
+WKHTMLTOIMAGE_BINARY = '/usr/bin/wkhtmltoimage'
+if os.path.exists('/usr/local/bin/phantomjs'):
     PHANTOM_BINARY = '/usr/local/bin/phantomjs'
+else:
+    PHANTOM_BINARY = '/usr/bin/phantomjs'
 SCREENSHOT_SCRIPT = os.path.join(ROOT, 'screenshot.js')
 MAX_THUMB_WIDTH = 256
 MAX_THUMB_HEIGHT = 64
diff --git a/modsdk/webserver.py b/modsdk/webserver.py
index ecea279..c621445 100644
--- a/modsdk/webserver.py
+++ b/modsdk/webserver.py
@@ -10,13 +10,14 @@ import subprocess
 
 from base64 import b64encode
 from PIL import Image
-from tornado import web, options, ioloop, template, httpclient
+from tornado import web, options, ioloop, template, httpclient, process
 from tornado.escape import squeeze
 from modsdk.settings import (PORT, HTML_DIR, WIZARD_DB,
                              CONFIG_FILE, CONFIG_DIR, TEMPLATE_DIR, LV2_DIR,
                              DEFAULT_DEVICE, DEFAULT_ICON_IMAGE,
                              DEFAULT_ICON_TEMPLATE, DEFAULT_SETTINGS_TEMPLATE,
                              MAX_THUMB_WIDTH, MAX_THUMB_HEIGHT,
+                             WKHTMLTOIMAGE_BINARY, CONVERT_BINARY,
                              SCREENSHOT_SCRIPT, PHANTOM_BINARY)
 
 # pylilv is a PITA to install, don't require it
@@ -371,25 +372,67 @@ class Screenshot(web.RequestHandler):
 
     def make_screenshot(self):
         fname = self.tmp_filename()
-        proc = subprocess.Popen([ PHANTOM_BINARY,
-                                  SCREENSHOT_SCRIPT,
-                                  'http://localhost:%d/icon.html#%s' % (PORT, self.uri),
+        fname_convert = self.tmp_filename()
+        
+        def proc_callback(arg):
+            if os.path.exists(fname_convert):
+                fh = open(fname_convert, 'rb')
+                os.remove(fname_convert)
+            else:
+                fh = open(fname, 'rb')
+            os.remove(fname)
+            self.handle_image(fh)
+        
+        def proc_callback_wkhtmltoimage(arg):
+            if os.path.exists(CONVERT_BINARY):
+                # make the image background transparent
+                proc = process.Subprocess([ CONVERT_BINARY,
                                   fname,
+                                  "-bordercolor", "white",
+                                  "-border", "1x1",
+                                  "-alpha", "set",
+                                  "-channel", "RGBA",
+                                  "-fuzz", "20%",
+                                  "-fill", "none",
+                                  "-floodfill", "+0+0", "white",
+                                  "-shave", "1x1",
+                                  fname_convert
+                                ])
+                proc.set_exit_callback(proc_callback)
+            else:
+                print("Warning: %s is missing, transparent background is impossible on icon creation" % CONVERT_BINARY)
+                proc_callback(arg)
+        
+        if os.path.exists(WKHTMLTOIMAGE_BINARY):
+            print([ WKHTMLTOIMAGE_BINARY,
+                                  "--width",
+                                  self.width,
+                                  "--height",
+                                  self.height,
+                                  'http://localhost:%d/icon.html#%s' % (PORT, self.uri),
+                                  fname
+                                ])
+            proc = process.Subprocess([ WKHTMLTOIMAGE_BINARY,
+                                  "--width",
                                   self.width,
+                                  "--height",
                                   self.height,
-                                ],
-                                stdout=subprocess.PIPE)
+                                  'http://localhost:%d/icon.html#%s' % (PORT, self.uri),
+                                  fname
+                                ])
+            proc.set_exit_callback(proc_callback_wkhtmltoimage)
+        else:
+            if os.path.exists(PHANTOM_BINARY):
+                proc = process.Subprocess([ PHANTOM_BINARY,
+                                      SCREENSHOT_SCRIPT,
+                                      'http://localhost:%d/icon.html#%s' % (PORT, self.uri),
+                                      fname,
+                                      self.width,
+                                      self.height,
+                                    ])
+                proc.set_exit_callback(proc_callback)
 
-        def proc_callback(fileno, event):
-            if proc.poll() is None:
-                return
-            loop.remove_handler(fileno)
-            fh = open(fname, 'rb')
-            os.remove(fname)
-            self.handle_image(fh)
 
-        loop = ioloop.IOLoop.instance()
-        loop.add_handler(proc.stdout.fileno(), proc_callback, 16)
 
     def handle_image(self, fh):
         screenshot_path = self.data['gui']['screenshot']
@@ -650,8 +693,8 @@ def make_application(port=PORT, output_log=False):
 
 def check_environment():
     issues = []
-    if not os.path.isfile(PHANTOM_BINARY):
-        issues.append("PhantomJS not found. Please install it and make sure the binary is located at %s" % PHANTOM_BINARY)
+    if (not os.path.isfile(PHANTOM_BINARY)) and (not os.path.isfile(WKHTMLTOIMAGE_BINARY)):
+        issues.append("PhantomJS/wkhtmltoimage are not found. Please install one of the two and make sure the binary is located at %s or %s" % (PHANTOM_BINARY, WKHTMLTOIMAGE_BINARY))
 
     if not os.path.exists(CONFIG_DIR):
         os.makedirs(CONFIG_DIR)
-- 
2.14.1

