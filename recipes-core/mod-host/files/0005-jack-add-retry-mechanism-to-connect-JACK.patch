From 06c4709df339ba508a334fff73e4179aed0db123 Mon Sep 17 00:00:00 2001
From: auto3000 <auto3000@users.noreply.github.com>
Date: Tue, 17 Oct 2017 20:13:14 +0200
Subject: [PATCH] jack: add retry mechanism to connect JACK

---
 src/effects.c | 51 ++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 46 insertions(+), 5 deletions(-)

diff --git a/src/effects.c b/src/effects.c
index 88c14fa..997dee5 100644
--- a/src/effects.c
+++ b/src/effects.c
@@ -36,6 +36,7 @@
 #include <math.h>
 #include <pthread.h>
 #include <sys/stat.h>
+#include <time.h>
 
 /* Jack */
 #include <jack/jack.h>
@@ -117,7 +118,9 @@ typedef struct {
 // custom jack flag used for cv
 // needed because we prefer jack2 which doesn't have metadata yet
 #define JackPortIsControlVoltage 0x100
-
+#define RETRY_REGISTER_MAX 5
+#define DELAY_BETWEEN_RETRY_REGISTER_IN_NS 1*NSEC_PER_SEC
+#define NSEC_PER_SEC	1000000000L
 /* Local */
 #include "effects.h"
 #include "monitor.h"
@@ -712,6 +715,14 @@ static uint32_t GetHyliaOutputLatency(void);
 *           LOCAL FUNCTIONS
 ************************************************************************************************************************
 */
+static void timespec_add(struct timespec* ts, unsigned long long ns)
+{
+  ts->tv_nsec += ns;
+  while (ts->tv_nsec >= NSEC_PER_SEC) {
+    ts->tv_nsec -= NSEC_PER_SEC;
+    ts->tv_sec++;
+  }
+}
 
 
 static void InstanceDelete(int effect_id)
@@ -3138,7 +3149,22 @@ int effects_init(void* client)
     }
     else
     {
-        g_jack_global_client = jack_client_open("mod-host", JackNoStartServer, NULL);
+      struct timespec t_sleep;
+
+      clock_gettime(CLOCK_MONOTONIC, &t_sleep);
+      for( int i=0; i<RETRY_REGISTER_MAX; i++ )
+      {
+        if( (g_jack_global_client = jack_client_open("mod-host", JackNoStartServer, NULL)) == NULL )
+        {
+          logger(LOG_INFO, "effects_init: can't open jack client retry=%d", i);
+          timespec_add(&t_sleep, DELAY_BETWEEN_RETRY_REGISTER_IN_NS);
+          clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &t_sleep, NULL);
+        }
+        else
+        {
+          i = RETRY_REGISTER_MAX;
+        }
+      }
     }
 
     if (g_jack_global_client == NULL)
@@ -3565,10 +3591,11 @@ int effects_add(const char *uri, int instance)
     port_name[MAX_CHAR_BUF_SIZE] = '\0';
 
     /* Jack */
-    jack_client_t *jack_client;
+    jack_client_t *jack_client = NULL;
     jack_status_t jack_status;
     unsigned long jack_flags = 0;
     jack_port_t *raw_midi_port = NULL;
+    struct timespec t_now;
 
     /* Lilv */
     const LilvPlugin *plugin;
@@ -3639,14 +3666,28 @@ int effects_add(const char *uri, int instance)
 
     /* Create a client to Jack */
     snprintf(effect_name, 31, "effect_%i", instance);
-    jack_client = jack_client_open(effect_name, JackNoStartServer, &jack_status);
+    clock_gettime(CLOCK_MONOTONIC, &t_now);
+    for( int i=0; i<RETRY_REGISTER_MAX; i++ )
+    {
+      if ( (jack_client = jack_client_open(effect_name, JackNoStartServer, &jack_status)) == NULL )
+      {
+          logger(LOG_INFO, "%s: can't get jack client uid=%s retry=%d", effect_name, uid, i);
+          timespec_add(&t_now, DELAY_BETWEEN_RETRY_REGISTER_IN_NS);
+          clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &t_now, NULL);
+      }
+      else
+      {
+        i = RETRY_REGISTER_MAX;
+      }
+    }
 
     if (!jack_client)
     {
-        logger(LOG_ERR, "can't get jack client");
+        logger(LOG_ERR, "%s: can't get jack client uid=%s", effect_name, uid);
         error = ERR_JACK_CLIENT_CREATION;
         goto error;
     }
+
     effect->jack_client = jack_client;
 
     /* Get the plugin */
